/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/alex337/egpuc-controller/pkg/apis/egpucController/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EGPUCLister helps list EGPUCs.
type EGPUCLister interface {
	// List lists all EGPUCs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.EGPUC, err error)
	// EGPUCs returns an object that can list and get EGPUCs.
	EGPUCs(namespace string) EGPUCNamespaceLister
	EGPUCListerExpansion
}

// eGPUCLister implements the EGPUCLister interface.
type eGPUCLister struct {
	indexer cache.Indexer
}

// NewEGPUCLister returns a new EGPUCLister.
func NewEGPUCLister(indexer cache.Indexer) EGPUCLister {
	return &eGPUCLister{indexer: indexer}
}

// List lists all EGPUCs in the indexer.
func (s *eGPUCLister) List(selector labels.Selector) (ret []*v1alpha1.EGPUC, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EGPUC))
	})
	return ret, err
}

// EGPUCs returns an object that can list and get EGPUCs.
func (s *eGPUCLister) EGPUCs(namespace string) EGPUCNamespaceLister {
	return eGPUCNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EGPUCNamespaceLister helps list and get EGPUCs.
type EGPUCNamespaceLister interface {
	// List lists all EGPUCs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.EGPUC, err error)
	// Get retrieves the EGPUC from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.EGPUC, error)
	EGPUCNamespaceListerExpansion
}

// eGPUCNamespaceLister implements the EGPUCNamespaceLister
// interface.
type eGPUCNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EGPUCs in the indexer for a given namespace.
func (s eGPUCNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EGPUC, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EGPUC))
	})
	return ret, err
}

// Get retrieves the EGPUC from the indexer for a given namespace and name.
func (s eGPUCNamespaceLister) Get(name string) (*v1alpha1.EGPUC, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("egpuc"), name)
	}
	return obj.(*v1alpha1.EGPUC), nil
}
